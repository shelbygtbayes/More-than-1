#include<iostream>
using namespace std;
struct treenode{
  int val;
  treenode* left , *right;
};
treenode* newtreenode(int v)
{
  treenode* n = new treenode();
  n->val = v;
  n->left = n->right = NULL;
  return n;
}
treenode* previous = NULL;
void conversion(treenode* root , treenode** head)
{
  if(!root) return;
  //static treenode* previous = NULL;
 // defining global or like static works
// for recursive calls
  conversion(root->left , head);
  if(previous == NULL)
    *head = root;
  else
  {
    root->left = previous;
    previous->right = root;
  }
  previous = root;
  conversion(root->right , head);
}
void printList(treenode *head)
{
    while (head!=NULL)
    {
        cout << head->val << " ";
        head = head->right;
    }
}
int main()
{
    treenode *root    = newtreenode(10);
    root->left        = newtreenode(12);
    root->right       = newtreenode(15);
    root->left->left  = newtreenode(25);
    root->left->right = newtreenode(30);
    root->right->left = newtreenode(36);
    treenode *head = NULL;
    conversion(root, &head);
    printList(head);
    return 0;
}
/*struct linked_node{
  int val;
  linked_node * prev , *next;
};
linked_node* new_linked_node(int x)
{
  linked_node* n = new linked_node();
  n->val = x;
  n->prev = NULL;
  n->next = NULL;
  return n;
}
linked_node** conversion(treenode* root , linked_node** headL)
{
  if(!root) return NULL;
  linked_node** previous = conversion(root->left , headL);
  linked_node* n = new_linked_node(root->val);
  linked_node** temp = &n;
  (*temp)->prev = *previous;
  if(previous)
  {
    (*previous)->next = (*temp);
  }
  linked_node** next = conversion(root->right , headL);
  (*temp)->next = *next;
  if(next)
  {
    cout << (*next)->val << endl;
    (*next)->prev = (*temp);
  }
  if(*previous == NULL and *next == NULL and *headL == NULL)
  {
    *headL = (*temp);
  }
  return temp;
}*/
