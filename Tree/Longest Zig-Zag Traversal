/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    
    unordered_map<TreeNode*,int> m_left , m_right;
    
    int ans=0;
    
    void postorder(TreeNode* root)
    {
        if(!root)
        {
            m_left[root] = -1;
            m_right[root] = -1;
            return;
        }
        
        postorder(root->left);
        
        postorder(root->right);
        
        m_left[root] = 1 + m_right[root->left];
        
        m_right[root] = 1 + m_left[root->right];
        
        ans = max( ans , max( m_left[root] , m_right[root] ) );
        
        return;
        
    }
    
    int longestZigZag(TreeNode* root) {
        
        postorder(root);
        
        return ans;
        
    }
};
//say prev = 1 --> It was left
/*
class Solution {
public:
    int ans = 0;
    int func(TreeNode * root , int right)
    {
        TreeNode* next;
        next = (right) ? (root->right) : (root->left);
        int l , r;
        if(next)
        {
            r = func(next , right);
            l = func(next , !right);
            ans = max( ans , l + 1);
            return l + 1;
        }
        return 0;
    }
    int longestZigZag(TreeNode* root) {
        if(!root) return 0;
        func(root , 0);
        func(root , 1);
        return ans;        
    }
};
*/
