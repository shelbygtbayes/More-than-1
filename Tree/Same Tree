/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool check(TreeNode* p , TreeNode* q)
    {
        if(p == NULL and q == NULL)
            return 1;
        else if(p == NULL or q == NULL)
            return 0;
        return (p->val == q->val);
    }
    bool isSameTree(TreeNode* p, TreeNode* q) {
        /*
        Recursive
        if(p == NULL and q == NULL)
            return 1;
        else if(p == NULL or q == NULL)
            return 0;
        if(p->val == q->val)
            return isSameTree(p->left , q->left) and isSameTree(p->right , q->right);
        else
            return 0;
        */
        if(p == NULL and q == NULL) return 1;
        if(!check(p,q)) return 0;
        queue< TreeNode* > pq,qq;
        pq.push(p);
        qq.push(q);
        
        while(!pq.empty() and !qq.empty())
        {
            TreeNode* pf = pq.front() , *qf = qq.front();
            pq.pop();
            qq.pop();
            if(!check(pf , qf)) return 0;
            if(pf != NULL)
            {
                if(!check(pf->left , qf->left)) return 0;
                if(pf->left != NULL)
                {
                    pq.push(pf->left);
                    qq.push(qf->left);
                }
                if(!check(pf->right , qf->right)) return 0;
                if(pf->right != NULL)
                {
                    pq.push(pf->right);
                    qq.push(qf->right);
                }
            }
        }
        return pq.empty() and qq.empty();
    }
};
