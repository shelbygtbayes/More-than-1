/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if(!root) return ans;
        map<int , vector<int> > hsh;//hash_height;
        queue< pair< TreeNode*  , int > >   q;
        q.push( make_pair(root , 0) );
        hsh[0].push_back(root->val);
        
        pair< TreeNode*  , int > curr;
        
        bool dir = 1;
        while(!q.empty())
        {
            curr = q.front();
            q.pop();
            TreeNode* node = curr.first; 
            int h = curr.second;
            if(node->left)
            {
                q.push(make_pair(node->left , h+1));
                hsh[h+1].push_back(node->left->val);
            }
            if(node->right)
            {
                q.push(make_pair(node->right , h+1));
                hsh[h+1].push_back(node->right->val);
            }
        }
        for(auto it  = hsh.begin() ; it != hsh.end() ; it++)
        {
            ans.push_back((*it).second);   
        }
        if(ans.size() >= 2)
        {
            for(int ind = 0 ; ind < ans.size() ; ind++)
            {
                if(ind % 2)
                    reverse( ans[ind].begin() , ans[ind].end() );
            }
        }
        return ans;
    }
};
