// Better Version

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void func( TreeNode* root , unordered_map<int,int> & hsh , int & ans , int n)
    {
        if(root->left == NULL and root->right == NULL) // Leaf Node
        {
            
            hsh[root->val]++;
           
            if(n%2 == 0)
            {
                for(auto it = hsh.begin() ; it != hsh.end() ; it++)
                {
                    int cnt = (*it).second;
                    if(cnt%2 ) // Odd Occurence
                    {
                        hsh[root->val]--;
                        return;
                    }
                }
                ans++; // Valid Path 
            }
            else
            {
                bool set = 0;
                for(auto it = hsh.begin() ; it != hsh.end() ; it++)
                {
                    int c = (*it).second;
                    if(c%2 !=0 and !set) // SINGLE TIME ODD CAN WORK
                    {
                        set = 1;
                    }
                    else if(c%2) // ELSE NOT VALID PATH
                    {
                        hsh[root->val]--;
                        return;
                    }
                }
                ans++; // VALID PATH
            }
            
            hsh[root->val]--;
            return ;
        }
        hsh[root->val]++;
        // INTERMEDIATE NODE
        if(root->left) // LEFT CHECK
            func(root->left , hsh , ans , n+1);
        if(root->right) // RIGHT CHECK
            func(root->right , hsh , ans , n+1);
        hsh[root->val]--;
    }
    int pseudoPalindromicPaths (TreeNode* root) {
        int ans = 0;
        if(!root) return 0; // BASE CASE
        unordered_map<int,int> hsh;
        func(root , hsh , ans , 1);
        return ans;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void func( TreeNode* root , string temp , int & ans)
    {
        if(root->left == NULL and root->right == NULL) // Leaf Node
        {
            temp = temp + to_string(root->val);
            map<char , int> hsh;
            for(auto c : temp)
                hsh[c]++;
            int n = temp.size();
            if(n%2 == 0)
            {
                for(auto it = hsh.begin() ; it != hsh.end() ; it++)
                {
                    int cnt = (*it).second;
                    if(cnt%2 ) // Odd Occurence
                        return;
                }
                ans++; // Valid Path 
            }
            else
            {
                bool set = 0;
                for(auto it = hsh.begin() ; it != hsh.end() ; it++)
                {
                    int c = (*it).second;
                    if(c%2 !=0 and !set) // SINGLE TIME ODD CAN WORK
                    {
                        set = 1;
                    }
                    else if(c%2) // ELSE NOT VALID PATH
                        return;
                }
                ans++; // VALID PATH
            }
            return ;
        }
        // INTERMEDIATE NODE
        if(root->left) // LEFT CHECK
            func(root->left , temp + to_string(root->val) , ans);
        if(root->right) // RIGHT CHECK
            func(root->right , temp + to_string(root->val) , ans);
    }
    int pseudoPalindromicPaths (TreeNode* root) {
        int ans = 0;
        if(!root) return 0; // BASE CASE
        func(root , "" , ans);
        return ans;
    }
};
