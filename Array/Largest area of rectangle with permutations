int Solution::solve(vector<vector<int> > &A)
{
    int n, m, res = 0;
    n = A.size();
    m = A[0].size();
    int col[n+1][m+1];

    memset(dp, 0, sizeof(dp));
    for (int c = 1; c <= m; c++) 
    {
      for (int r = 1; r <= n; r++) 
      {
        if(A[r-1][c-1] == 0)
          col[r][c] = 0;
        else 
          col[r][c] += col[r-1][c] + 1;
      }
    }
    for (int r = 1; r <= n; r++) 
    {
      int count[n + 1], cnt = 0;
      memset(count, 0, sizeof(count));

      for (int c = 1; c <= m; c++) 
        count[col[r][c]] ++;

      for (int len = n; len >= 0; --len)
      {
        cnt += count[len];
        res = max(res, cnt * len);
      }
    }
    return res;
  }
