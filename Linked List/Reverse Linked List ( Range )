/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if(m == n) 
            return head;
        int cnt = 1 ;
        ListNode* st  = head;
        ListNode* head1 = st;
        while(cnt != m)
        {
            head1 = st;
            st = st->next;
            cnt++;  
        }
        ListNode* temp = st->next;
        int times = n-m;
        while(times > 0)
        {
            ListNode* temp_next = temp->next;
            temp -> next = st;
            st = temp;
            temp = temp_next;
            times--;
        }
        if(m == 1)
        {
            head1->next = temp;
            return st;
        }
        ListNode* end = head1->next;
        head1->next = st;
        end->next = temp;
        return head;
    }
};
/*head  st              end     temp  temp_next;
|     |                |      |
1   -> 4   ->  3  ->   2  ->  5   - >    NULL
|     |
1-2-3-4 5 6

int cnt = 1 ;
ListNode* st  = head;
ListNode* head1 = NULL;
while(cnt != m)
{
    head1 = st;
    st = st->next;
    cnt++;  
}

temp = st->next;
int times = n-m;
while(times > 0)
{
    temp_next = temp->next;
    temp -> next = st;
    st = temp;
    temp = temp_next;
    times--;
}
ListNode* end = head1->next;
head1->next = st;
end->next = temp;
*/
