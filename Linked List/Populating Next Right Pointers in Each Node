/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root;
        queue<Node*> q;
        q.push(root);
        q.push(NULL);
        vector<Node*> level;
        while(!q.empty())
        {
            Node* f = q.front();
            q.pop();
            if(!f)
            {
                if(level.size() != 0)
                {
                    level.push_back(NULL);
                    Node* curr = level[0];
                    for(int ind = 1 ; ind < level.size() - 1 ; ind++)
                    {
                        curr->next = level[ind];
                        curr = curr->next;
                    }
                    level.clear();
                    q.push(NULL);
                }
            }
            else
            {
                level.push_back(f);
                if(f->left)
                    q.push(f->left);
                if(f->right)
                    q.push(f->right);
            }
        }
        return root;
    }
};/*
1 #
2 3 #
4 5 6 7 #
*/
