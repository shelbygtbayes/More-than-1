#include<iostream>
#include<stack>
using namespace std;
struct node
{
    int val;
    node* left;
    node* right;
};
node* newNode(int v)
{
    node* n = new node();
    n->val = v;
    n->left = NULL;
    n->right = NULL;
    return n;
}
node* insert(node*root , int v)
{
    if(!root) return newNode(v);
    else if(root->val < v)   
        root->right = insert(root->right , v);
    else if(root->val > v)
        root->left = insert(root->left , v);
    else 
        return root;
}
int func(node* root1 , node* root2 , int sum)
{
    stack< node* > s1 , s2;
    int ans = 0;
    while(1)
    {
        while(root1)
        {
            s1.push(root1);
            root1 = root1->left;
        }
        while(root2)
        {
            s2.push(root2);
            root2 = root2->right;
        }
        if(s1.empty() or s2.empty())
            break;
        node *top1 = s1.top() , *top2 = s2.top();
        if(top1->val + top2->val == sum)
        {
            ans++;
            s1.pop();
            s2.pop();
            root1 = top1->right;
            root2 = top2->left;
        }
        else if(top1->val + top2->val > sum)
        {
            s2.pop();
            root2 = top2->left;
        }
        else
        {
            s1.pop();
            root1 = top1->right;
        }
    }
    return ans;
    
}
int main()
{
    node *root1 = NULL , *root2 = NULL;
    root1 = insert(root1 , 5); 
    root1 = insert(root1 , 3); 
    root1 = insert(root1 , 7); 
    root1 = insert(root1 , 2); 
    root1 = insert(root1 , 4); 
    root1 = insert(root1 , 6); 
    root1 = insert(root1 , 8);

    root2 = insert(root2 , 10);
    root2 = insert(root2 , 6);
    root2 = insert(root2 , 15);
    root2 = insert(root2 , 3);
    root2 = insert(root2 , 8);
    root2 = insert(root2 , 11);
    root2 = insert(root2 , 18);

    int sum = 16;
    cout << " Pairs for sum = " << sum << " " << func(root1 , root2 , sum) << endl;
    return 0;
}
