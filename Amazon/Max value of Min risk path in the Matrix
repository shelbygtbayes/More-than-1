#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int func(vector<vector<int>> &matrix)
{
  priority_queue<vector<int>> pq;
  int n = matrix.size() , m = matrix[0].size();
  //Use Max-heap to find the Maximum value of Minimum Path Risk
  pq.push({matrix[0][0] , 0 , 0});
  vector<vector<bool>> vis(n , vector<bool>(m , 0));
  vis[0][0] = 1;
  int ans = min(matrix[0][0] , matrix[n-1][m-1]);
  int dir[] = {0,-1,0,1,0};
  while(!pq.empty())
  {
    vector<int> top = pq.top();
    pq.pop();
    int weight = top[0] , row = top[1] , col = top[2];
    if(row == n-1 and col == m-1)
      return ans;
    ans = min(ans , matrix[row][col]);
    vis[row][col] = 1;
    for(int d = 0 ; d < 4 ; d++)
    {
      int x = row + dir[d] , y = col + dir[d+1];
      if(x < 0 or y < 0 or x >= n or y >= m or vis[x][y])
        continue;
      pq.push({matrix[x][y] , x , y});
    }
  }
  return -1;
}
int main()
{
  vector<vector<int>> v{{5,4,5},{1,2,6},{7,4,6}};
  cout << func(v);
  return 0;
}
