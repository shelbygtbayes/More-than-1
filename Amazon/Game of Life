class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        int n = board.size();
        if(n == 0)
            return;
        int m = board[0].size();
        int dx[] = {0,1,-1,0,1,-1,-1,1};
        int dy[] = {-1,0,0,1,1,-1,1,-1};
        auto exists = [&](int x , int y)
        {
          if(x < 0 or y < 0 or x >= n or y >= m)
              return 0;
          return 1;
        };
        for(int row = 0 ; row < n ; row++)
        {
            for(int col = 0 ; col < m ; col++)
            {
                int cnt = 0;
                for(int dir = 0 ; dir < 8 ; dir++)
                {
                    int x = row + dx[dir] , y = col + dy[dir];
                    if(exists(x,y) and abs(board[x][y]) == 1 )
                        cnt++;
                }
                if(board[row][col] == 1)
                {
                    if(cnt < 2 or cnt > 3)
                        board[row][col] = -1;
                }
                else
                {
                    if(cnt == 3)
                        board[row][col] = -2;
                }
            }
        }
        for(int row = 0 ; row < n ; row++)
        {
            for(int col = 0 ; col < m ; col++)
            {
                if(board[row][col] == -1)
                    board[row][col] = 0;
                else if(board[row][col] == -2)
                    board[row][col] = 1;
            }
        }
    }
};

/*
if M[][] == 1 
    if neighbours live < 2 or > 3 
        M[][] = 0
else
    if neighbours live == 3 
        M[][] = 1
        
   0 1 2
0 [0,0,0]  -1 -> (1) -> 0
1 [1,0,1]
2 [0,1,1]
3 [0,1,0]

*/
