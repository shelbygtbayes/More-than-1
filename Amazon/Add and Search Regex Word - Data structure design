class WordDictionary {
public:
    /** Initialize your data structure here. */
    struct node
    {
        bool end =  0;
        array< node* , 26 > child;
    }*root = new node();
    
    WordDictionary() {
        
    }
    /** Adds a word into the data structure. */
    void addWord(string word) 
    {
        node* ptr = root;
        for(auto ch : word)
        {
            int index = ch - 'a';
            if( ptr->child[index] == NULL )
                ptr->child[index] = new node();
            ptr = ptr->child[index];
         }
         ptr->end = 1;
    }
    bool word_search(string word , int index , int n , node* ptr)
    {
        if(index == n)
            return ptr->end;
        if(word[index] == '.')
        {
            for(int ind = 0 ; ind < 26 ; ind++)
            {
                 if(ptr->child[ind] and word_search(word , index+1 , n , ptr->child[ind]))
                     return 1;      
            }
        }
        else
        {
            int ind = word[index] - 'a';
            if(ptr->child[ind])
                return word_search(word , index+1 , n , ptr->child[ind]);
        }
        return 0;
    }
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        node* ptr = root;
        if(!ptr) return 0;
        return word_search( word , 0 , word.size() , ptr);
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
