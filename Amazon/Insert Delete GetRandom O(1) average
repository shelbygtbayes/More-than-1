class RandomizedSet {
public:
    /** Initialize your data structure here. */
    unordered_map<int,int> position;
    vector<int> arr;
    
    RandomizedSet() {
    
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(position.find(val) != position.end()) 
            return 0;
        position[val] = arr.size();
        arr.push_back(val);
        /*for(auto c : arr)
            cout << c << " ";
        cout << endl;*/
        return 1;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(position.find(val) == position.end()) 
            return 0;
        int pos = position[val];
        arr[pos] = arr.back();
        position[arr.back()] = pos;
        arr.pop_back();
        position.erase(val);
        
        return 1;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        return arr[rand()%arr.size()]; 
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
