#include<iostream>
using namespace std;
struct Node
{
    struct Node* left, *right;
    int key;
};
Node* newNode(int key)
{
    Node* temp = new Node;
    temp->key = key;
    temp->left = temp->right = NULL;
    return temp;
}
Node* lowestcommonancestor(Node* root , int val1 , int val2)
{
  if(!root) return NULL;
  if(root->key == val1 or root->key == val2)
    return root;
  Node* left = lowestcommonancestor(root->left , val1 , val2);
  Node* right = lowestcommonancestor(root->right , val1 , val2);
  if(!left and !right)
    return NULL;
  if(left and right)
    return root;
  return (left) ? (left) : (right);
}
bool countTurns(Node* root , bool take_left , int &count , int key)
{
  if(!root)
    return false;
  if(root->key == key)
    return true;
  if(take_left)
  {
    if(countTurns(root->left , take_left , count , key))
      return 1;
    if(countTurns(root->right , !take_left , count , key))
    {
      count += 1;
      return 1;
    }
  }
  else
  {
    if(countTurns(root->right , take_left , count , key))
      return 1;
    if(countTurns(root->left , !take_left , count , key))
    {
      count += 1;
      return 1;
    }
  }
  return 0;
}
// if flag = 1 then take_left
int Number_of_Turns(Node* root , int val1 , int val2)
{
  Node* lca = lowestcommonancestor(root , val1 , val2);
  if(!lca)
    return -1;
  // Not a straight line
  int count = 0;
  if(lca->key != val1 and lca->key != val2)
  {
    countTurns(lca->left , 1 , count , val1);
    countTurns(lca->right , 0 , count , val1);
    countTurns(lca->left , 1 , count , val2);
    countTurns(lca->right , 0 , count , val2);
    count += 1;
  }
  else if(lca->key == val1)
  {
    countTurns(lca->left , 1 , count , val2);
    countTurns(lca->right , 0 , count , val2);
  }
  else
  {
    countTurns(lca->left , 1 , count , val1);
    countTurns(lca->right , 0 , count , val1);
  }
  return count;
}
int main()
{
  Node* root = newNode(1);
  root->left = newNode(2);
  root->right = newNode(3);
  root->left->left = newNode(4);
  root->left->right = newNode(5);
  root->right->left = newNode(6);
  root->right->right = newNode(7);
  root->left->left->left = newNode(8);
  root->right->left->left = newNode(9);
  root->right->left->right = newNode(10);
  cout << Number_of_Turns(root , 5 , 10);
  return 0;
}
