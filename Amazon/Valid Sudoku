class Solution {
public:
    bool valid_line(vector<char> & block)
    {
        int dots = 0 , nums = 0;
        vector<int> cnt(10,0);
        for(auto cell : block)
        {
            if(isdigit(cell))
            {
                int index = cell - '0';
                cnt[index]++;
                if(cnt[index] > 1)
                    return 0;
                nums++;
            }
            else
                dots++;
        }
        return dots + nums <= 9;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        bool ans = 1;
        for(int r = 0 ; r < 9 ; r++)
        {
            vector<char> line;
            for(int c = 0 ; c < 9 ; c++)
            {
                line.emplace_back(board[c][r]);
            }
            ans = ans and valid_line( board[r] ) and valid_line( line );
            if(!ans)
                return 0;
        }
        for(int r = 0 ; r < 9 ; r+=3)
        {
            for(int c = 0 ; c < 9 ; c+=3)
            {
                vector<char> block;
                for(int row = r ; row < r + 3 ; row++)
                {
                    for(int col = c ; col < c + 3 ; col++)
                        block.push_back(board[row][col]);
                }
                ans = ans and valid_line( block );
                if(!ans)
                    return 0;
            }
        }
        return 1;
    }
};
