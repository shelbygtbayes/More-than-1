class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> q(k);
        vector<int> ans;
        int ind = 0;
        while(ind < k)
        {
            // To Contain Values in Decreasing order in queue
            while(!q.empty() and nums[ind] > nums[q.front()])
                q.pop_front();
            q.push_back(ind);
            ind++;
        }
        while(ind < nums.size())
        {
            int findex = q.front();
            ans.push_back(nums[findex]);
            // Since index in Increasing order
            // Remove Index which are not part of current window [ind-(k-1) to ind]
            while(!q.empty() and q.front() <= ind-k)
                q.pop_front();
            // Since Queue Holds value in decresing order
            while(!q.empty() and nums[ind] > nums[q.back()])
                q.pop_back();
            
            q.push_back(ind);
            
            ind++;
        }
        ans.push_back(nums[q.front()]);
        return ans;
    }
};
