/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool check(TreeNode* r , vector<int> &arr , int index)
    {
        if(!r and index < arr.size()) // If Tree Over but array left
            return 0;
        if(index == arr.size()-1)    // If last index
        {
           return r->val == arr[index] and !(r->left) and !(r->right); 
        }
        if(r->val == arr[index])   // Matches
        {
            // Check Path continuation in left and right subtrees
            if(check(r->left , arr , index+1) || check(r->right , arr , index+1))
            {
                return 1;  
            } 
        }
        return 0;              
    }
    bool isValidSequence(TreeNode* root, vector<int>& arr) {
        if(!root) return 0;
        return check(root , arr , 0);
    }
};
