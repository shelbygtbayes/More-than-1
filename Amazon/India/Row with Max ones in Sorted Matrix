#include<iostream>
#include<vector>
using namespace std;
int func_normal_binary_search_matrix(vector<vector<int>> & matrix)
{
  int n = matrix.size();
  int m = matrix[0].size();
  auto search = [&](int st , int end , vector<int> & arr){
    while(st <= end)
    {
      int mid = st + (end-st)/2;
      if(arr[mid])
        end = mid-1;
      else
        st = mid+1;
    }
    return st; // first occurance
  };
  int st = 0 , end = m , cnt = m , ans = -1;
  for(int ind = 0 ; ind < n ; ind++)
  {
    int pos = search(st , end , matrix[ind]);
    if(pos != m and pos < cnt)
    {
      cnt = pos;
      ans = ind;
    }
  }
  return ans;
}
int func_matrix_linear(vector<vector<int>> & matrix)
{
  int n = matrix.size();
  int m = matrix[0].size();
  auto first = [&](){
    int st = 0 , end = m; // If not exists
    while(st <= end)
    {
      int mid = st + (end - st)/2;
      if(matrix[0][mid])
        end = mid-1;
      else
        st = mid+1;
    }
    return st;
  };
  int pos = first();
  if(pos == m) // If not exists
    pos = m-1;
  int max_row = 0;
  for(int ind = 1 ; ind < n ; ind++)
  {
    while( pos >= 0 and matrix[ind][pos])
    {
      pos--;
      max_row = ind;
    }
  }
  return max_row;
}
int main()
{
  vector<vector<int>> matrix = {
                    {0, 0, 0, 1},
                    {0, 1, 1, 1},
                    {1, 1, 1, 1},
                    {0, 1, 1, 1},
                    {0, 0, 0, 0}};
  cout << "HERE ROW WITH MAX 1'S: " << func_normal_binary_search_matrix(matrix)<< endl;
  cout << "HERE ROW WITH MAX 1'S: " << func_matrix_linear(matrix);
  return 0;
}
