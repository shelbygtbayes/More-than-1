class Solution {
public:
// Solution Link: https://leetcode.com/problems/first-missing-positive/discuss/602504/C%2B%2B-solution-100-seed-o(n)-with-explanations
    int firstMissingPositive(vector<int>& nums) {
        int ind = 0 , n = nums.size();
        while(ind < nums.size())
        {
            if(ind + 1 == nums[ind] or nums[ind] <= 0 or nums[ind] > n ) 
                ind++;
            else if(nums[ind] != nums[nums[ind]-1] ) 
                swap( nums[ind] , nums[nums[ind]-1] );
            else ind++;
        }
        ind = 0;
        while(ind < n && nums[ind] == ind + 1) 
            ind++;
        return ind+1;
       
    }
};
  /*
  int firstMissingPositive(vector<int>& nums) {
        // Pivoting w.r.t pivot = 0
   int l = 0 , n = nums.size();
        
        if(n == 0) return 1;
        else if(n == 1) 
            return (nums[0] != 1) ? (1) : (2);
        
        for(int r = 0 ; r < n ; r++)
        {
            if(nums[r] <=0)
            {
                swap(l,r,nums);
                l++;
            }
        }
        if(l == n)
            return 1;
        int size = n-l;
        for(int index = 0 ; index < size ; index++)
        {
            if(abs(nums[index+l])-1 < size && nums[abs(nums[index+l])-1] > 0)
            {
                nums[abs(nums[index+l])-1] = -1*abs(nums[index+l]);
            }
        }
        for(int ind = l ; ind < n ; ind++)
        {
            if(nums[ind] > 0)
                return ind+1;
        }
        cout << size+1 << endl;
        return size+1;
}
  */
       
