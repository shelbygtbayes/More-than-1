class Solution {
public:
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {
        if(N == 1) 
            return 1;
        vector<int> parent(N*2+1);
        for(int node = 0 ; node <= N*2 ; node++)
            parent[node] = node;
        
        auto find = [&](int r){
            if(r != parent[r])
                r = parent[r];
            return parent[r];
        };
        auto merge = [&](int a,int b){
           int p1 = find(a) , p2 = find(b);
            if(p1 == p2) 
                return parent[p1];
            else if(p1 < p2)
            {
                parent[p2] = p1;
                return p1;
            }
            else
            {
                parent[p1] = p2;
                return p2;
            }
        };
        int cnt = 0;
        for(auto edge : dislikes)
        {
            int x = edge[0] , y = edge[1];
            parent[x+N] = parent[y] = merge(x+N,y);
            parent[x] = parent[y+N] = merge(x,y+N);
        }
        for(int i=1 ; i<=N ; i++)
        {
            if(find(i) == find(i+N)) return 0;
        }
        return 1;
    }
};

/*
1 2 3 4 5
1 1 1 1 1 
[[1,2],[2,3],[3,4],[4,5],[1,5]]
    
1 - 2 - 3 - 4 - 5
|_______________|
  
1 2 3  
1 1 1 
[[1,2],[1,3],[2,3]]
  G1: 1 2 3
  G2: 4 5 6
  {1,5} , {4,2}  
  {1,6} ,{4,3}
  {5,3} , {2,6} 
  Loop: 1 5 3 4 2 6 1
*/
