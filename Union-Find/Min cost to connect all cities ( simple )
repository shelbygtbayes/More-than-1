bool func(const vector<int> & a , const vector<int> b)
{
    if(a[2] == b[2]) return a[0] < b[0];
    else return a[2] < b[2];
}
int Solution::solve(int A, vector<vector<int> > &B) {
    int parent[A+1];
    int rank[A+1];
    
    for(int i = 1 ; i <=A ; i++)
    {
        parent[i] = i;
        rank[i] = 1;
    }
    auto find = [&](int r)
    {
        while(r != parent[r])
            r = parent[r];
        return parent[r];
    };
    auto Union = [&](int r1 , int r2)
    {
        int p1 = find(r1) , p2 = find(r2);
        if(p1 == p2) return p1;
        else if(rank[p1] > rank[p2])
        {
            parent[p2] = p1;
            rank[p1] += rank[p2];
            return p1;
        }
        else
        {
            parent[p1] = p2;
            rank[p2] += rank[p1];
            return p2;
        }
    };
    int cost = 0;
    sort(B.begin() , B.end() , func);
    for(auto edge : B)
    {
        int u = edge[0] , v = edge[1] , w = edge[2];
        if(find(u)!=find(v))
        {
            parent[u] = parent[v] = Union(u,v);
            cost += w;
        }
    }
    return cost;
}
