// 100%
class Solution {
public:
    /**
     * @param n: An integer
     * @param edges: a list of undirected edges
     * @return: true if it's a valid tree, or false
     */
     
    void check(int index , int prev , map<int,bool> & vis , map<int,vector<int>>& g , bool &iscycle)
    {
        if(vis[index])
        {
            iscycle = 1;
            return;
        }
        vis[index] = 1;
        for(auto v : g[index])
        {
            if(v != prev)
                check(v , index , vis , g , iscycle);
            if(iscycle)
                return;
        }
    }
    bool validTree(int n, vector<vector<int>> &edges) {
    
        map<int,bool> vis;
        map<int,vector<int> > g;
        for(auto e : edges)
        {
            int u = e[0] , v = e[1];
            g[u].push_back(v);
            g[v].push_back(u);
        }
        bool iscycle = 0;
        check(0 , -1 , vis , g , iscycle);
        if(iscycle) return 0;
        for(int i = 0 ; i < n ; i++)
        {
            if(!vis[i]) return 0;
        }
        return 1;
    }
};
// 79%
class Solution {
public:
    /**
     * @param n: An integer
     * @param edges: a list of undirected edges
     * @return: true if it's a valid tree, or false
     */
    bool validTree(int n, vector<vector<int>> &edges) {
        // write your code here
        if(n == 0) return 1;
        int parent[n] , rank[n];
        for(int i = 0 ; i < n ; i++)
        {
            parent[i] = i;
            rank[i] = 1;
        }
        auto find = [&](int r)
        {
            while(r != parent[r])
            {
                r = parent[r];
            }
            return parent[r];
        };
        auto Union = [&](int r1 , int r2)
        {
            int p1 = parent[r1] , p2 = parent[r2];
            if(p1 == p2) return p1;
            if(rank[p1] > rank[p2])
            {
                parent[p2] = p1;
                rank[p1] += rank[p2];
                return p1;
            }
            else
            {
                parent[p1] = p2;
                rank[p2] += rank[p1];
                return p2;
            }
        };
     //   map<int , vector<int> > g;
        for(auto e : edges)
        {
            int u = e[0] , v = e[1];
       //     g[u].push_back(v);
         //   g[v].push_back(u);
            if(find(u) != find(v))
            {
                parent[u] = parent[v] = Union(u,v);
            }
            else if(u != v) // Cycle
            {
                return 0;
            }
        }
        int cc = 0;
        for(int node = 0; node < n ; node++)
        {
            if(parent[node] == node)
               {
                   cout << node << endl;
                   cc++;
               }
        }

        return cc == 1;
    }
};
