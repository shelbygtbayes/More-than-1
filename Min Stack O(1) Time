// Using Stack of Pairs 
// pair.first --> Holding current value
// pair.second --> Holding Minimum at that current time
class MinStack {
public:
    /** initialize your data structure here. */
    public:
    stack< pair<int,int> > s;
    MinStack() {
        
    }
    
    void push(int x) {
        if(s.empty())
            s.push(make_pair(x,x));
         else
            s.push(make_pair(x , min( x , s.top().second )));
    }
    
    void pop() {
        s.pop();
    }

    int top() {
        if(!s.empty())
            return s.top().first;
        else return -1;
    }
    
    int getMin() {
        if(!s.empty())
            return s.top().second;
        else return -1;
    }
};



class MinStack {
public:
    /** initialize your data structure here. */
    public:
    vector<int> min_q;
    vector<int> s;
    MinStack() {
    }
    
    void push(int x) {
        s.push_back(x);
        if(min_q.empty() or x <= *(min_q.end()-1))
            min_q.push_back(x);
    }
    
    void pop() {
        if(!min_q.empty() and *(s.end()-1) == *(min_q.end()-1)) min_q.pop_back();
        s.pop_back();
    }
    
    int top() {
        return *(s.end()-1);
    }
    
    int getMin() {
        if(!min_q.empty()) return *(min_q.end()-1);
        else return *(s.end()-1);
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(x);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
