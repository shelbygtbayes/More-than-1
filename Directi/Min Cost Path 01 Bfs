int Solution::solve(int n, int m, vector<string> &grid) {
    deque< vector<int> > q;
    q.push_back({0,0});
    int ans = INT_MAX;
    int dy[4] =   {-1,1,0,0}; /*Don't know why different*/
    int dx[4] =   {0,0,-1,1};
    char dir[4] = {'L','R','U','D'};
    auto check = [&](int r , int c){
      if(r < 0 or c < 0 or r >= n or c >= m)
            return 0;
        return 1;
    };
    vector<vector<int> > dis(n , vector<int>(m , INT_MAX));
    dis[0][0] = 0;
    
    while(!q.empty())
    {
        vector<int> fr = q.front();
        q.pop_front();
        int r = fr[0] , c = fr[1];
        for(int d = 0 ; d < 4 ; d++)              
        {
            int x = r + dx[d] , y = c + dy[d];
            if(!check(x,y))
                continue;
            int cost = (grid[r][c] == dir[d]) ? (0) : (1);
            if(dis[x][y] > dis[r][c] + cost)
            {
                dis[x][y] = dis[r][c] + cost;
                if(grid[r][c] == dir[d])
                {
                    q.push_front({x,y});
                }
                else
                {
                    q.push_back({x,y});
                }   
            }
        }
    }
    return dis[n-1][m-1];
}
