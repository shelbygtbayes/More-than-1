class Solution {
public:
    bool exists(int x ,int y , int n)
    {
        if(x < 0 || y < 0 || x >= n || y >=n) return 0;
        return 1;
    }
    double knightmove(int r,int c,int k,vector<vector<vector<double>>> & dp,int n)
    {
        if(!exists(r,c,n)) return 0;
        else if(k == 0) return 1;  // All Moves Done and on board
        if(dp[r][c][k] == -1) 
        {
            int dx[8] = {-2 , -2 , 2 , 2 , 1 , -1 , 1 , -1};
            int dy[8] = {-1 ,  1  ,-1 , 1 , 2 , 2 , -2 , -2};

            dp[r][c][k] = 0;

            for(int i = 0 ; i < 8 ; i++)
            {
                int x = r + dx[i] , y = c + dy[i]; 
                dp[r][c][k] += knightmove(x , y , k-1 , dp , n);
            }

            dp[r][c][k] = dp[r][c][k]/8.0;
           // cout <<"Here "<< dp[r][c][k] << endl;
        }
        return dp[r][c][k];
    }
    double knightProbability(int N, int K, int r, int c) {
        if(K == 0) return exists(r,c,N);
        vector<vector<vector<double>>> dp( N , vector<vector<double>>(N , vector<double>(K+1,-1) ) );
       
        return knightmove(r , c , K , dp , N);
        
    }
};
