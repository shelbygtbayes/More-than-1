class Solution {
public:
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        int n = envelopes.size();
        if(n < 1) 
            return 0;
        sort(envelopes.begin() , envelopes.end() , [](const vector<int> & a , const vector<int> & b){
           if(a[0] != b[0]) return a[0] < b[0];
           return  a[1] < b[1];
        });
        // Sorted w.r.t width;
        // Find LIS w.r.t height;
        int dp[n];
        int ans = -1;
        for(int ind = 0 ; ind < n ; ind++)
            dp[ind] = 1;
        
        for(int end = 1 ; end < n ; end++)
        {
            for(int st = 0 ; st < end ; st++)
            {
                if(envelopes[end][1] > envelopes[st][1] and envelopes[end][0] > envelopes[st][0])
                {
                    dp[end] = max( dp[end] , dp[st] + 1);
                    ans = max( ans , dp[end] );
                }
            }
        }
        return max( ans , 1 );
    }
};

/*
[5,4],[6,4],[5,7],[5,4]

54 54 57 64

*/

