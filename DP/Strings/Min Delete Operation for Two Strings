class Solution {
public:
    int minDistance(string word1, string word2) {

        int n = word1.size() , m = word2.size();
        if(n == 0 || m == 0)
            return (n == 0) ? (m) : (n);
        int dp[n+1][m+1];
        for(int ind1 = 0 ; ind1 <= n ; ind1++)
        {
            dp[ind1][0] = ind1;
        }
        for(int ind2 = 0 ; ind2 <= m ; ind2++)
        {
            dp[0][ind2] = ind2;
        }

        for(int ind1 = 1 ; ind1 <= n ; ind1++)
        {
            for(int ind2 = 1 ; ind2 <= m ; ind2++)
            {
                if(word1[ind1-1] == word2[ind2-1])
                    dp[ind1][ind2] = dp[ind1-1][ind2-1] ;
                else
                {
                    dp[ind1][ind2] = min( dp[ind1-1][ind2] , dp[ind1][ind2-1] ) + 1;
                }
            }
        }
        return dp[n][m];        
    }
};
/*
dp[ind1][ind2] = dp[ind1 + 1][ind2 + 1] , ( dp[ind1 + 1][ind2], dp[ind1][ind2 + 1] ) + 1
*/                          
