int Solution::numDistinct(string A, string B) {
    int n = A.size();
    int m = B.size();
    if(m > n)
        return 0;
    int dp[n+1][m+1];
    for(int ind = 0 ; ind <= n ; ind++)
        dp[ind][0] = 1; // One empty subsequence always exists
    for(int ind = 0 ; ind <= m ; ind++)
        dp[0][ind] = 0; // One empty subsequence always exists
    dp[0][0] = 1;
    for(int ind1 = 1 ; ind1 <= n ; ind1++)
    {
        for(int ind2 = 1 ; ind2 <= m ; ind2++)
        {
            if(A[ind1-1] != B[ind2-1])  // If no match
                dp[ind1][ind2] = dp[ind1-1][ind2];  // Continue with the previous
            else
                dp[ind1][ind2] = dp[ind1-1][ind2-1] + dp[ind1-1][ind2]; // Else Ignore the Matching char + Continue with the Matched
        }
    }
    return dp[n][m];
}
