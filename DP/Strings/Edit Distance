class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.size() , m = word2.size();
        if(n == 0 || m== 0)
            return (n==0) ? (m) : (n);
        int dp[n+1][m+1];
        // Delete all characters from word1
        for(int ind = 0 ; ind <= n ; ind++)
            dp[ind][0] = ind; //    dp[ind][0] = 1 + dp[ind-1][0];
        
        // Insert all characters to word1
        for(int ind = 0 ; ind <= m ; ind++)
            dp[0][ind] = ind;//    dp[0][ind] = 1 + dp[0][ind-1];
        
        for(int st = 1 ; st <= n ; st++)
        {
            for(int end = 1 ; end <= m ; end++)
            {
                if(word1[st-1] == word2[end-1])
                    dp[st][end] = dp[st-1][end-1];
                else
                    dp[st][end] = min(dp[st][end-1] , min( dp[st-1][end] , dp[st-1][end-1] ) ) + 1;
            }
        }
        return dp[n][m];
    }
};/*
h|orse -> n
r|ose  -> m

word1 -> word2
dp[ind1+1][ind2] , dp[ind1][ind2+1] , dp[ind1+1][ind2+1]
    del                 insert           same / replace
ind1 -> ind1 - 1
ind2 -> ind2 - 1
    Insert a character
    Delete a character
    Replace a character
*/
