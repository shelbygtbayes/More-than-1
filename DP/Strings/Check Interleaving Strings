int lcs(string A , string B)
{
    int n = A.size() , m = B.size();
    int dp[n+1][m+1];
    memset(dp , 0 , sizeof(dp));
    for(int ind = 0 ; ind <= n ; ind++)
        dp[ind][0] = 0;
        
    for(int ind = 0 ; ind <= m ; ind++)
        dp[0][ind] = 0;
    
    for(int p1 = 1 ; p1 <= n ; p1++)
    {
        for(int p2 = 1 ; p2 <= m ; p2++)
        {
            if(A[p1-1] == B[p2-1])
                dp[p1][p2] = dp[p1-1][p2-1] + 1;
            else
                dp[p1][p2] = max(dp[p1-1][p2] , dp[p1][p2-1]);
        }
    }
    return dp[n][m];
}
int Solution::isInterleave(string A, string B, string C) {
    int n = A.size() , m = B.size();
    if(n+m != C.size())
        return 0;
    int x = lcs(A , C);
    int y = lcs(B , C);
    if(x == n and y == m)
        return 1;
    return 0;
}
