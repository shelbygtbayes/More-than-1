// Dynamic 
class Solution {
public:
    long long int min(long long int a , long long int b)
    {
        return (a>b)?(b):(a);
    }
    int minSteps(int n) {
        if(n < 2) return 0;
        if(n < 4) return n;
        long long int dp[n+1];
        dp[0] = dp[1] = 0;
        dp[2] = 2;
        dp[3] = 3;
        for(int i = 4 ; i <= n ; i++) dp[i] = i; // MAXIMUM_STEPS ( Pasting one by one )
        for(int no = 4 ; no <= n ; no++)
        {
            for(int copied_length = 2 ; copied_length <= no/2 ; copied_length++)
            {
                if(no % copied_length == 0)
                    dp[no] = min(dp[no] , dp[copied_length] + no/copied_length);
    // Min_Steps to get 'A' of length = copied_length and Paste it ( no/copied_length ) times.
            }
        }
        return dp[n];
    }
};
// Greedy Approach
class Solution {
public:
    int minSteps(int n) {
        // Simple Way
        // Need to ensure the Minimum Paste operation to follow
        int curr = 1 , copied = 1 , ans = 0;
        int left = n; 
        while(curr < n) 
        {
            left = n - curr; // Characters Left
            if(left % curr == 0) // CopyAll-Paste
            {
                copied = curr; // CopyAll Multiply the Copy characters
                curr += copied; // Paste
                ans += 2;
            } 
            else // Paste
            {
                curr += copied; // Paste
                ans++;
            }
        }
        return ans;
    }
   
};
