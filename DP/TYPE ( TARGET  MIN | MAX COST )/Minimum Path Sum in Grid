class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size() , n = grid[0].size();
        // dp[i][j] --> Min cost to reach the (i,j) cell from (0,0) if Movement of right and left allowed
        int dp[m][n];
        
        dp[0][0] = grid[0][0];
        
        // Since Only Right and down movement possible, Hence to get 1st row cells only right movement possible( Up Not allowed )
        for(int j = 1 ; j < n ; j++)
            dp[0][j] = dp[0][j-1] + grid[0][j];
        
        for(int i = 1 ; i < m ; i++)
            dp[i][0] = dp[i-1][0] + grid[i][0];
        
        for(int i = 1 ; i < m ; i++)
        {
          for(int j = 1 ; j < n ; j++)
          {
            // Get the Minimum cost by Moving Downward (i-1) --> i or Right (j-1) --> j , Then add the grid cost
            dp[i][j] = min(dp[i-1][j] , dp[i][j-1]) + grid[i][j];   
          }
        }
        return dp[m-1][n-1];
    }
};
