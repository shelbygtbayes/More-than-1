class Solution {
public:
    int max_rect_histogram(vector<int> &row)
    {
        int ans = -1 , prev_top = -1 , max_ans = -1;
        stack<int> s;
        s.push(0);
        int i = 1;
        while(i < row.size())
        {
            if(s.empty() || row[s.top()] <= row[i])
                s.push(i++);
            else
            {
                prev_top = s.top();
                s.pop();
                if(s.empty())
                    ans = row[prev_top]*i;
                else
                    ans = row[prev_top] * (i - s.top() - 1);
                max_ans = max(ans , max_ans);
            }
        }
        while(!s.empty())
        {
            prev_top = s.top();
            s.pop();
            if(s.empty())
                ans = row[prev_top]*i;
            else
                ans = row[prev_top] * (i - s.top() - 1);
                
            max_ans = max(ans , max_ans);
            
        }
        return max_ans;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        int m = matrix.size();
        
        if(m == 0) return 0;
        int n = matrix[0].size() , max_ans = -1;
        
        if(m == 1 and n == 1) return matrix[0][0] == '1';
        
        vector<int> height(n,0);
        
        for(int i = 0 ; i < n ; i++)
        {
            height[i] = matrix[0][i] - 48;
        }
        max_ans = max_rect_histogram(height);
        
        for(int r = 1 ; r < m ; r++)
        {
            for(int c = 0 ; c < n ; c++)
            {
                if(matrix[r][c] == '0')
                    height[c] = 0;
                else
                    height[c] = height[c]+1;
            }
            max_ans = max( max_ans , max_rect_histogram(height) );
        }
        return max_ans;
    }
};
