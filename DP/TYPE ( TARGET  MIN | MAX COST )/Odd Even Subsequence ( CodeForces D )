Approach:
We need to minimize the Maximum element in the Subsequence ( taking account Max element present at odd / even position )
Clearly Our answer lies in array itself left = min_element(arr) , right = max_element(arr)
Now we need to find the ( Max_element or cost ) which is present at odd / even places in subsequence
Now traverse the array find the length of subsequence by comparing element at odd / even places <= cost alternatively
Now minimize this cost
#include<iostream>
using namespace std;
int func(int *arr , int n , int k)
{
    int l = 1e9 , r = 1;
    for(int ind = 0 ; ind < n ; ind++)
    {
        l = min(l , arr[ind]);
        r = max(r , arr[ind]);
    }
    int ans = 0;
    // Need to check the Max element present in either at odd places or even places
    // is the Max element among other elements in that group ( Odd or Even group )
    // While checking we don't take care for the complement position element
    // If could form of length >= k --> true
    auto check = [&](int Maxcost , int isOdd){
        int len = 0;
        for(int ind = 0 ; ind < n ; ind++){
            if(isOdd){
                len++;
                //isodd = !isodd;
                isOdd ^= 1;
            }
            else
            {
                if(arr[ind] <= Maxcost)
                {
                    isOdd ^= 1;
                    len++;
                }   
            }
        }
        return len >= k;
    };
    while (l <= r)
    {
        int mid = l + (r-l)/2;
        // Considering Max_element 
        //      at even places or   odd places 
        if(check(mid , 0) || check(mid , 1)) 
        {
            ans = mid;
            // Minimizing the ans
            r = mid-1;
        }
        else
        {
            l = mid+1;   
        }
    }
    return ans;    
}
int main()
{
    int n,k;
    cin >> n >> k;
    int * arr = new int[n];
    for(int ind = 0 ; ind < n ; ind++)
    {
        cin >> arr[ind];
    }
    cout << func(arr , n , k);
    return 0;
}
