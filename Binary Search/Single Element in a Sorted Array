class Solution {
public:
    int func(int st,int end,vector<int> nums)
    {
        int n = nums.size() , mid = st + (end-st)/2;
        if(mid == 0 and nums[0]!=nums[1]) return nums[0];
        else if(mid == n-1 and nums[mid]!=nums[mid-1]) return nums[n-1];
        else if(nums[mid] != nums[mid-1] and nums[mid]!=nums[mid+1])
            return nums[mid];
        else
        {
            int leftCount = mid+1 , rightCount = n - mid - 1;
            if(nums[mid] == nums[mid-1])
            {
                if(leftCount%2)
                    return func(st,mid-1,nums);
                else
                    return func(mid+1,end,nums);
            }
            else
            {
                if(rightCount%2)
                    return func(st,mid-1,nums);
                else
                    return func(mid+1,end,nums);
            }
        }
           
    }
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return nums[0];
            
        return func(0,n-1,nums);
    }
};
