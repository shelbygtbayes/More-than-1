class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int H) {
        if(piles.size() == 1)
            return piles[0]/H + ((piles[0] % H) ? (1) : (0));
        auto check = [&](int b)
        {
            int h = 0;
            for(auto ban : piles)
            {
                int x = ban;
                h += (x / b);
                if(x % b)
                    h += 1;
            }
            return h <= H;
        };
        
        int l = 0;
        int r = *max_element(piles.begin() , piles.end());
        int ans = INT_MAX;
        while(l <= r)
        {
            int m = l + (r-l)/2;
            if(check(m))
            {
                ans = min( ans , m );
                r = m - 1;
            }
            else
                l = m+1;
        }
        return ans;
    }
};
/*
3           ->  1
6   ->  4   ->  1
        2   ->  1
7   ->  4   ->  1
        3   ->  1
11  ->  4   ->  1
        4   ->  1
        3   ->  1
            H = 8
    */
