Here : Solution Range : [ 0 ... max_element ]
       Search Criteria : Decided by Distance ( sum ) and target closeness

class Solution {
public:
    int findBestValue(vector<int>& arr, int target) {
        auto check = [&](int v){
          int sum = 0;
          for(auto el : arr)
          {
              if(el > v)
                  sum += v;
              else
                  sum += el;
          }
          return sum;
        };

        int dis = INT_MAX;
        int l = 0 , r = *max_element(arr.begin() , arr.end());
        int ans = INT_MAX;
        while( l <= r )
        {
            int mid = l + (r-l)/2;
            int distance = check(mid);
            if( abs(distance - target) < dis)
            {
                dis = abs(distance - target);
                ans = mid;
            }
            else if(abs(distance - target) == dis)
                ans = min(ans , mid);
            if(distance < target)
                l = mid + 1;
            else 
                r = mid - 1;
        }
        return ans;
        
    }
};
