/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int goodNodes(TreeNode* root) {
        int ans = 1;
        unordered_map< TreeNode* , TreeNode* > p;
        p[root] = root;
        queue< TreeNode* > q;
        q.push(root);
        while(!q.empty())
        {
            TreeNode* f = q.front();
            q.pop();
            if(f->left)
            {
                if((p[f])->val > (f->left->val))
                    p[f->left] = p[f]; 
                else
                {
                    p[f->left] = f->left;
                    //if(f->left->val > (p[f])->val)
                        ans++;
                }
                q.push(f->left);
            }
            if(f->right)
            {
                if((p[f])->val > (f->right->val))
                    p[f->right] = p[f]; 
                else
                {
                    p[f->right] = f->right;
                    //if(f->right->val > (p[f])->val)
                        ans++;
                }
                q.push(f->right);
            }
        }
        return ans;
    }
};
// [3,1,4,3,null,1,5]
/*
class Solution {
    int dfs(TreeNode *root, int upp = INT_MIN) {
        if(root == NULL)
            return 0;
        int ret = root -> val >= upp;
        upp = max(upp, root -> val);
        ret += dfs(root -> left, upp);
        ret += dfs(root -> right, upp);
        return ret;
    }
public:
    int goodNodes(TreeNode* root) {
        return dfs(root);
    }
};
*/
