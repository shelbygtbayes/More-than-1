Bitwise1 :
  return x and (!(x & (x-1))); --> since powers of 2 > 0

Maths Implementation
 return floor(log2(x)) == ceil(log2(x))

To Count Set Bits

int cnt = __builtin_popcount(x);

log(x)
int countSetBits(int x)
{
  if(x == 0) return x;
  else return 1 + countSetBits( x & (x-1) );
}

O(1) using LookUp table (Best Case) --> O(log(n)/k)---> k = log(n)
                    	//  0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15 
int num_of_set_bits[16] = { 0, 	1, 	1, 	2, 	1, 	2, 	2, 	3, 	1, 	2, 	2, 	3, 	2, 	3, 	3, 	4 }; 
  
/* Recursively get nibble of a given number and map them in the array */
unsigned int countSetBits(unsigned int num) 
{ 
    int nibble = 0; 
    if (0 == num) 
        return num_of_set_bits[0]; 
  
    // Find last nibble 
    nibble = num & 0xf; ( 0000 --> In hexadecimal format )
  
    // Use pre-stored values to find count 
    // in last nibble plus recursively add 
    // remaining nibbles. 
    return num_of_set_bits[nibble] + countSetBits(num >> 4); 
} 
  
