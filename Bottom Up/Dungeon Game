Approach:
Here we need to think why bottom up
Since we are require to keep positive health at last
Now we move bottom up to find the min +ve health require
Now we aacount health as 'if power' then min_health = 1 else 'if deamons' then min_health = 1 - d[n-1][m-1]
Now dp[r][c] =  dp[r][c] = max( 1 , min( dp[r+1][c] , dp[r][c+1] ) - d[r][c] );

class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& d) {
        int n = d.size() , m = d[0].size();
        
        if(n == 0) return 0;
        if(m == 1 and n == 1) return (d[0][0] > 0) ? 1 : (abs(d[0][0]) + 1);
        
        vector<vector<int>> dp(n , vector<int>(m , INT_MAX));
        
        dp[n-1][m-1] = max(1 , 1- d[n-1][m-1]);
        
        for(int r = n-2 ; r >= 0 ; r--)
            dp[r][m-1] =  max( 1 , dp[r+1][m-1] - d[r][m-1] );
        
        for(int c = m-2 ; c >= 0 ; c--)
            dp[n-1][c] =  max( 1 , dp[n-1][c+1] - d[n-1][c]);
        
        for(int r = n-2 ; r >= 0 ; r--)
        {
            for(int c = m-2 ; c >= 0 ; c--)
            {
                dp[r][c] = max( 1 , min( dp[r+1][c] , dp[r][c+1] ) - d[r][c] );
            }
        }
        return dp[0][0];
    }
};
