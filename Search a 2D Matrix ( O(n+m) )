// Approach 1 ( Modified Linear Search ) 
class Solution {
public:
    
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        if(m == 0) return 0;
        int n = matrix[0].size();
        int r = m-1 , c = 0;
        while(r >=0 and c < n)
        {
            if(matrix[r][c] == target)
                return 1;
            else if(matrix[r][c] > target)
                r--;
            else
                c++;
        }
        return 0;
    }
};

// Approach 2 ( Basic Binary Search ) ( O(mlogn))
class Solution {
public:
    
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        if(m == 0) return 0;
        int n = matrix[0].size();
        bool ans = 0;
        auto lower_bound = [&](int l , int r , int row){
            int low = l , high = r;
            while(low <= high)
            {
                int mid = low + (high-low)/2;
                if(matrix[row][mid] == target)
                {
                    return 1;
                }
                else if(matrix[row][mid] > target) high = mid-1;
                else low = mid+1;
            }
            return 0;
        };
        for(int r = 0 ; r < m ; r++)
        {
            if(lower_bound(0 , n-1 , r))
                return 1;
        }
        return 0;
    }
};
