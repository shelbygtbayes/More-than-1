class Solution {
public:
    
    void dfs(int r , int c , vector<vector<int>>& grid)
    {
        if(!grid[r][c]) return;
        int n = grid.size() ,  m = grid[0].size();
        int dx[4] = {-1,0,1,0};
        int dy[4] = {0 , 1 , 0 , -1};
        grid[r][c] = 0;
        for(int i = 0 ; i < 4 ; i++)
        {
            int x = r + dx[i] , y = c + dy[i];
            if(x < 0 || y < 0 || x >= n || y >= m || !grid[x][y])
                continue;
            dfs(x , y , grid);
        }
    }
    int numEnclaves(vector<vector<int>>& A) {
        
        int n = A.size() ,  m = A[0].size();
        
        if(n == 1 and m == 1)
            return 0;
        for(int r = 0 ; r < n ; r++)
        {
            if(A[r][0]) dfs(r , 0 , A);
            if(A[r][m-1]) dfs(r , m-1 , A);
        }
        
        for(int c = 0 ; c < m ; c++)
        {
            if(A[0][c]) dfs(0 , c , A);
            if(A[n-1][c]) dfs(n-1 , c , A);
        }
        
        int cnt = 0;
        
        for(int r = 0 ; r < n ; r++)
        {
            for(int c = 0 ; c < m ; c++)
            {
                if(A[r][c]) cnt++;
            }
        }
        
        return cnt;
    }
};
/*
[0,0,0,0]
[0,0,1,0]
[0,1,1,0]
[0,0,0,0]

[0,0,0,0]
[0,0,0,0]
[0,0,0,0]
[0,0,0,0]*/
