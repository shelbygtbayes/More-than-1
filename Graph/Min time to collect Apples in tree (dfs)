// Accepted Path Tracing O(n*k) 
class Solution {
public:
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        unordered_map<int,int> parent;
        for(auto edge : edges)
        {
            int u = edge[0] , v = edge[1];
            parent[v] = u;
        }
        parent[0] = -1;
        int time = 0;
        vector<int> vis(n,0); 
        for(int curr = 0 ; curr < n ; curr++)
        {
            if(hasApple[curr])
            {
                int node = curr;
                while(parent[node]!= -1 and !vis[node])
                {
                    time+=2;
                    vis[node] = 1;
                    node = parent[node];
                }
            }
        }
        return time;
    }
};
// TLE
class Solution {
public:
    int dfs(int u, vector<bool>& hasApple , map<int,bool> &vis , unordered_map<int , vector<int> > graph)
    {
        int time = 0;
        vis[u] = 1;
        for(auto v : graph[u])
        {
            if(!vis[v])
            {
                int got_Apples = dfs(v , hasApple , vis , graph); // Check if path upto leaf has apple
                if(got_Apples > 0 || hasApple[v])    // If Child Node has the Apple        
                    time = time + (got_Apples+2);
            }
            
        }
        return time;
    }
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        unordered_map<int , vector<int> > graph;
        for(auto edge : edges)
        {
            int u = edge[0] , v = edge[1];
            graph[u].push_back(v);
            graph[v].push_back(u);
        }
        map<int,bool> vis;
        int time = 0;
        time = dfs(0,hasApple,vis,graph);
        return time;
    }
};
