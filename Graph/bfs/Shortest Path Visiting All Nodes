class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        queue < vector<int> > q;
        // current , Bit Mapping Representation -> Order of vertices visited 
        vector< vector< int > > vis(n , vector<int>(1 << n , 0));
        for(int start = 0 ; start < n ; start++)
        {
            // 1 << start --> start order ( Single vertex )
            q.push({start , 1 << start});
        }
        int level = 0;
        int final_order = (1 << n) - 1; // When all vertices visited
        while( !q.empty() )
        {
            // Level Order Traversal
            int s = q.size();
            for(int t = 0 ; t < s ; t++)
            {
                vector<int> f = q.front();
                q.pop();
                int x = f[0] , y = f[1];
                if(y == final_order) return level;
                if(!vis[x][y])
                {
                    vis[x][y] = 1;
                    for(auto dest : graph[x])
                    {
                        int order = y | (1 << dest);
                        q.push({dest , order});
                    }
                }
            }
            level++;
        }
        return -1;
    }
};
