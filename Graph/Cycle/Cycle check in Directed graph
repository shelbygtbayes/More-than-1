vector<int> g[100001];
bool func(int u  , vector<int> &vis)
{
    vis[u] = 1;
    bool ans = 0;
    for(auto v : g[u])
    {
            if(vis[v] == 1)
                return 1;
            else if(vis[u] == 0 and func(v  , vis))
                return 1;
    }
    vis[u] = 2;
    //cout << "Here : " << u << " " <<  ans << endl;
    return 0;
}
int Solution::solve(int n, vector<vector<int> > &edges) {
    vector<int> vis( n+1  , 0);
    for(auto edge : edges){
        int u = edge[0] , v = edge[1];
        g[u].push_back(v);
    }
    for(int ind = 1 ; ind <= n ; ind++)
    {
        if(!vis[ind] and func(ind  , vis))
            return 1;
    }
    return 0;
    // for undirected
    /*vector<int> parent( n+1 );
    for(int ind = 1 ; ind <= n ; ind++)
        parent[ind] = ind;
    auto find = [&](int r){
        while(r != parent[r])
            r = parent[r];
        return parent[r];
    };
    auto merge = [&](int a , int b){
      int p1 = find(a) , p2 = find(b);
      if(p1 == p2) return parent[p1];
      else if(p1 > p2){
          parent[p1] = p2;
          return p2;
      }
      else{
          parent[p2] = p1;
          return p1;
      }
    };
    for(auto edge : edges){
        int u = edge[0] , v = edge[1];
        if(find(u) != find(v))
        {
            parent[u] = parent[v] = merge(u,v);
        }
        else
            return 1;
    }
    return 0;*/
}
