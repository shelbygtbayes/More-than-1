#include<iostream>
#include<vector>
#include<climits>
#include <queue>
#define n 6
using namespace std;
bool bfs(vector<vector<int>> graph , int src , int dest , vector<int> &parent)
{
  vector<int> vis(n , 0); // Interested in path only ( not shortest )
  vis[src] = 1;
  queue<int> q;
  q.push(src);
  while(!q.empty())
  {
    int u = q.front();
    q.pop();
    if(u == dest)
      break;
    for(int v = 0 ; v < n ; v++)
    {
      if( graph[u][v] > 0 and vis[v] == 0)
      {
        q.push(v);
        vis[v] = 1;
        parent[v] = u;
      }
    }
  }
  return (vis[dest] == 1);
}
int fordfuklerson(vector<vector<int>> graph, int src , int dest)
{
  vector<vector<int>> residual_graph = graph;
  vector<int> parent(n,-1);
  int max_flow = 0;
  
  // while there is a path from src to dest
  
  while(bfs(residual_graph , src , dest , parent))
  {
    int path_flow = INT_MAX;
    
    // Find Min value of edge in the path from src to dest
    
    int v = dest;
    while(v != src)
    {
        int u = parent[v];
        path_flow = min(path_flow , residual_graph[u][v]);
        v = parent[v];
    }
    
    // Update the edges with the capacity left and create/update reverse edge
    // with capacity used
    
    v = dest;
    while(v != src)
    {
        int u = parent[v];
        residual_graph[u][v] -= path_flow;
        residual_graph[v][u] += path_flow;
        v = parent[v];
    }
    // Add to answer ( so far got flow )
  
  max_flow += path_flow;
  
  }
  return max_flow;
}
int main()
{
  vector<vector<int>> graph =  {{0, 16, 13, 0, 0, 0},
                                {0, 0, 10, 12, 0, 0},
                                {0, 4, 0, 0, 14, 0},
                                {0, 0, 9, 0, 0, 20},
                                {0, 0, 0, 7, 0, 4},
                                {0, 0, 0, 0, 0, 0}
                                };
    cout << "The maximum possible flow is " << fordfuklerson(graph, 0, 5);
  return 0;
}
